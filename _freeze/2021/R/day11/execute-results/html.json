{
  "hash": "780fe6118b05e773205f15b1a1b97c1a",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Day 11\"\ndate: 2021-12-11\nauthor:\n  name: https://adventofcode.com/2021/day/11\n  url: https://adventofcode.com/2021/day/11\n---\n\n\n\n## Setup\n\nImport libraries:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n:::\n\n\n\nRead input from plain-text file into a matrix:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninput <- read_fwf(\n  file = \"../input/day11.txt\", \n  col_positions = fwf_widths(rep(1, 10)), \n  col_types = \"i\",\n  show_col_types = FALSE\n) |> \n  as.matrix() |> \n  unname()\n\nwidth  <- ncol(input)\nheight <- nrow(input)\n```\n:::\n\n\n\n## Part 1\n\nDefine a function to compute the energy boost from a single flash:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nn <- \\(x) lag(x, default = 0)\ns <- \\(x) lead(x, default = 0)\nw <- \\(x) t(lag(t(x), default = 0))\ne <- \\(x) t(lead(t(x), default = 0))\n\nadd_energy <- function(x) {\n  n(x) + s(x) + e(x) + w(x) + n(w(x)) + n(e(x)) + s(w(x)) + s(e(x))\n}\n```\n:::\n\n\n\nDefine a function to run a single step, which may consist of many flashes until a stable state is reached:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstep <- function(mtx) {\n  \n  # Initialize\n  mtx <- mtx + 1\n  has_flashed <- matrix(FALSE, nrow = height, ncol = width)\n  \n  # Repeat until done flashing\n  repeat {\n    cur_flash <- mtx > 9 & !has_flashed\n    \n    if (all(cur_flash == FALSE)) break\n    \n    has_flashed <- has_flashed | cur_flash\n    mtx <- mtx + add_energy(cur_flash)\n  }\n  \n  # Replace all flashed values with 0\n  replace(mtx, has_flashed, 0)\n}\n```\n:::\n\n\n\nDefine a function to count the total individual flashes that occur over a defined number of steps:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncount_flashes <- function(mtx, n_steps) {\n  \n  flashes <- 0\n  for (i in 1:n_steps) {\n    mtx <- step(mtx)\n    flashes <- flashes + sum(mtx == 0)\n  }\n  \n  flashes\n}\n```\n:::\n\n\n\nRun on puzzle input. Count the flashes over 100 steps:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncount_flashes(input, 100) \n```\n:::\n\n\n\n## Part 2\n\nDefine a function to find the first step when all cells flash in unison:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfirst_in_unison <- function(mtx) {\n  i <- 0\n  \n  while (any(mtx != 0)) {\n     mtx <- step(mtx)\n     i <- i + 1\n  }\n  \n  i\n}\n```\n:::\n\n\n\nRun on input:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfirst_in_unison(input)\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}