{
  "hash": "2859af177ad270928250ca794b8d1137",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Day 14\"\ndate: 2021-12-14\nauthor:\n  name: https://adventofcode.com/2021/day/14\n  url: https://adventofcode.com/2021/day/14\n---\n\n\n\n\n## Setup\n\nImport libraries:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(unglue)\n```\n:::\n\n\n\n\nRead input from file:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninput <- read_lines(\"../input/day14.txt\", skip_empty_rows = TRUE)\n```\n:::\n\n\n\n\nConvert input to a starting sequence and a list of pair insertion rules:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntemplate <- head(input, 1)\n\nrules <- tail(input, -1) |> \n  unglue_data(\"{pair} -> {output}\")\n```\n:::\n\n\n\n\nDisable scientific formatting when displaying large numbers:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\noptions(scipen = 999)\n```\n:::\n\n\n\n\n## Part 1\n\nDefine a function to grow the polymer `n` times, then take the count of the most common character in the string and subtract the count of the least common character:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngrow_n <- function(polymer, n) {\n  \n  # Save the first and last letter for later reference\n  letter_start <- str_sub(polymer,  1L,  1L)\n  letter_final <- str_sub(polymer, -1L, -1L)\n  \n  # Reformat the initial string as a dataframe of pairs and counts\n  polymer <- map2_dfr(\n    .x = head(str_split_1(polymer, \"\"), -1),\n    .y = tail(str_split_1(polymer, \"\"), -1),\n    ~ tibble(pair = str_c(.x, .y))\n  ) |> \n    summarize(n = n(), .by = pair)\n  \n  # Grow the polymer N times, tracking its growth as compact counts of pairs\n  for (i in 1:n) {\n    polymer <- polymer |> \n      left_join(rules, join_by(pair)) |> \n      mutate(\n        pair1 = str_replace(pair, \".$\", output),\n        pair2 = str_replace(pair, \"^.\", output),\n        pair3 = case_when(is.na(output) ~ pair)\n      ) |> \n      select(n, pair1, pair2, pair3) |> \n      pivot_longer(\n        starts_with(\"pair\"), \n        values_to = \"pair\", \n        names_to = NULL, \n        values_drop_na = TRUE\n      ) |> \n      summarize(n = sum(n), .by = pair)\n  }\n  \n  # Count final letters and de-duplicate\n  counts <- polymer |> \n    mutate(letters = str_split(pair, \"\")) |> \n    unnest_longer(letters) |> \n    summarize(n = sum(n), .by = letters) |> \n    \n    # Initial and final letters were not duplicated, so return +1 to them\n    mutate(\n      n = case_when(letters == letter_start ~ n + 1, .default = n),\n      n = case_when(letters == letter_final ~ n + 1, .default = n),\n      n = n / 2\n    ) |> \n    pull(n)\n  \n  # Return the range of greatest - least letter counts\n  max(counts) - min(counts)\n}\n```\n:::\n\n\n\n\nRun for 10 steps on puzzle input:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngrow_n(template, 10)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 3213\n```\n\n\n:::\n:::\n\n\n\n\n## Part 2\n\nRun for 40 steps on puzzle input:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngrow_n(template, 40)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 3711743744429\n```\n\n\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}