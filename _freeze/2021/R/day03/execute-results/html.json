{
  "hash": "50e110c4c10a3c4b712caa45ba6b3af0",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Day 3\"\ndate: 2021-12-03\nauthor:\n  name: https://adventofcode.com/2021/day/03\n  url: https://adventofcode.com/2021/day/03\n---\n\n\n\n## Setup\n\nImport libraries:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(vctrs)\nlibrary(tidyverse)\n```\n:::\n\n\n\nRead input from file:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninput <- read_lines(\"../input/day03.txt\")\n```\n:::\n\n\n\n\n## Part 1\n\nDefine functions to compute the least and most common values in a vector (using greatest/least values as tiebreakers, as defined later in part 2):\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmost_common  <- \\(x) vec_count(x) |> slice_max(count) |> pull(key) |> max()\nleast_common <- \\(x) vec_count(x) |> slice_min(count) |> pull(key) |> min()\n```\n:::\n\n\n\nDefine a function to convert a vector of binary integers to a decimal number:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbin_to_num <- \\(x) strtoi(str_flatten(x), base = 2)\n```\n:::\n\n\n\nPrep the input by splitting binary numbers into separate digits by positions:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf <- input |> \n  str_split(\"\") |> \n  enframe(name = \"id\") |> \n  unnest_longer(value, indices_to = \"pos\") |>   \n  mutate(value = as.integer(value))\n```\n:::\n\n\n\nCompute the most and least common values in each position to get the gamma and epsilon values, then multiply them together to get the power consumption:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf |> \n  summarize(\n    gamma = most_common(value), \n    epsilon = least_common(value), \n    .by = pos\n  ) |> \n  summarize(across(c(gamma, epsilon), bin_to_num)) |> \n  prod()\n```\n:::\n\n\n\n## Part 2\n\nDefine a set of functions to compute the oxygen and co2 ratings:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nget_rating <- function(data, f = c(\"most_common\", \"least_common\")) {\n  \n  for (i in unique(data$pos)) {\n    id_lst <- data |> \n      filter(pos == i) |> \n      filter(value == get(f)(value)) |> \n      pull(id)\n    \n    data <- filter(data, id %in% id_lst)\n    \n    if (length(id_lst) == 1)\n      return(bin_to_num(data$value))\n  }\n}\n\noxygen_rating <- partial(get_rating, f = \"most_common\")\nco2_rating    <- partial(get_rating, f = \"least_common\")\n```\n:::\n\n\n\nCompute the final life support rating:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\noxygen_rating(df) * co2_rating(df)\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}