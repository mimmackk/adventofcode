{
  "hash": "366fbcae2fdd0b69ee26bfcc7142eb17",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Day 4\"\ndate: 2021-12-04\nauthor:\n  name: https://adventofcode.com/2021/day/4\n  url: https://adventofcode.com/2021/day/4\n---\n\n\n\n\n\n## Setup\n\nImport libraries:\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n:::\n\n\n\n\n\nRead input from file:\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# List of drawn numbers\ndrawn <- scan(\"../input/day04.txt\", nlines = 1, sep = \",\", quiet = TRUE)\n\n# Set of bingo boards\nboards <- read_table(\"../input/day04.txt\", skip = 2, col_names = FALSE) |> \n  group_split(cumsum(row_number() %% 5 == 1), .keep = FALSE) |> \n  map(~ unname(as.matrix(.x)))\n```\n:::\n\n\n\n\n\n## Part 1\n\nFor all bingo boards, determine the time at which each number on their card is drawn.\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfilled <- imap_dfr(boards, \\(board, board_id) {\n  imap_dfr(drawn, \\(num, idx) {\n    which(board == num, arr.ind = TRUE) |> \n      as_tibble() |> \n      mutate(\n        time = idx, \n        board_id = board_id\n      )\n  })\n})\n```\n:::\n\n\n\n\n\nFor each board, determine the time at which each \"wins\" by achieving a full row or column:\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwins <- map_dfr(c(\"row\", \"col\"), \\(dim) {\n  filled |> \n    summarize(n = n(), time = max(time), .by = all_of(c(\"board_id\", dim))) |> \n    rename(dim_value = {{ dim }}) |> \n    mutate(dim_name = dim) |> \n    filter(n == 5)\n}) |> \n  summarize(time = min(time), .by = board_id)\n```\n:::\n\n\n\n\n\nDefine a function to score a board at the time of its win:\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nscore <- function(board_id, time_win) {\n  \n  board      <- boards[[board_id]]\n  nums_drawn <- drawn[1:time_win]\n  unmarked   <- board[!(board %in% nums_drawn)]\n  score      <- sum(unmarked) * tail(nums_drawn, 1)\n\n  return(score)\n}\n```\n:::\n\n\n\n\n\nCompute the final score of the first board to win:\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfirst_winner <- slice_min(wins, time)\n\nscore(first_winner$board_id, first_winner$time)\n```\n:::\n\n\n\n\n\n## Part 2\n\nCompute the final score of the last board to win:\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlast_winner <- slice_max(wins, time)\n\nscore(last_winner$board_id, last_winner$time)\n```\n:::\n",
    "supporting": [
      "day04_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}