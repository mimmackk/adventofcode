{
  "hash": "04b006f20f5df8b943a2b0366fa59002",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Day 10\"\ndate: 2021-12-10\nauthor:\n  name: https://adventofcode.com/2021/day/10\n  url: https://adventofcode.com/2021/day/10\n---\n\n\n\n\n## Setup\n\nImport libraries:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n:::\n\n\n\n\nRead input from file:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninput <- read_lines(\"../input/day10.txt\") |> \n  str_split(\"\")\n```\n:::\n\n\n\n## Part 1\n\nDefine our open/close bracket pairs and the scores for each type:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nb_open  <- c(\"(\", \"[\", \"{\", \"<\")\nb_close <- c(\")\", \"]\", \"}\", \">\")\nb_pairs <- c(set_names(b_close, b_open), set_names(b_open, b_close))\nb_score <- set_names(c(3, 57, 1197, 25137), b_close)\n```\n:::\n\n\n\n\nDefine a function to move through a line, add/remove brackets to a stack, and return the first invalid closing bracket found.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncheck_line <- function(x) {\n  stack <- c()\n  for (chr in x) {\n    if (chr %in% b_open)\n      stack <- c(stack, chr)\n    else if (tail(stack, 1) == b_pairs[chr])\n      stack <- head(stack, -1)\n    else\n      return(chr)\n  }\n}\n```\n:::\n\n\n\n\nIdentify which lines have mistakes:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nscanned <- input |> \n  map(check_line)\n```\n:::\n\n\n\n\nSum the total score for all mistakes:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nscanned |> \n  unlist() |> \n  map_int(~ b_score[[.x]]) |> \n  sum()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 216297\n```\n\n\n:::\n:::\n\n\n\n\n## Part 2\n\nModify the point values for each closing bracket:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nb_score <- set_names(1:4, b_close)\n```\n:::\n\n\n\n\nAlter the line-scanning function to return the autocomplete brackets:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncomplete_line <- function(x) {\n  stack <- c()\n  for (chr in x) {\n    if (chr %in% b_open)\n      stack <- c(stack, chr)\n    else if (tail(stack, 1) == b_pairs[chr])\n      stack <- head(stack, -1)\n  }\n  \n  return(unname(b_pairs[rev(stack)]))\n}\n```\n:::\n\n\n\n\nDefine a function to score a given completion string:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nscore_autocomplete <- \\(x) reduce(x, ~ .x * 5 + b_score[[.y]], .init = 0)\n```\n:::\n\n\n\n\nAutocomplete all non-error inputs, score the results, then take the median:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nis_incomplete <- map_lgl(scanned, is.null)\n\ninput |> \n  keep(is_incomplete) |> \n  map(complete_line) |> \n  map_dbl(score_autocomplete) |> \n  median()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 2165057169\n```\n\n\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}