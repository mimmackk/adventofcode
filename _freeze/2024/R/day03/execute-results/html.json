{
  "hash": "937f3ccedeb4dde3047959ffc74cf6f0",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Day 3\"\ndate: 2024-12-03\nauthor:\n  name: https://adventofcode.com/2024/day/3\n  url: https://adventofcode.com/2024/day/3\n---\n\n\n\n\n## Setup\n\nImport libraries:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(unglue)\n```\n:::\n\n\n\n\nRead text input from file and combine into a single string:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninput <- read_lines(\"../input/day03.txt\") |> \n  str_c(collapse = \"\")\n```\n:::\n\n\n\n\n## Part 1\n\nDefine a function that \"uncorrupts\" a string of text by extracting all valid `mul` instructions, executing them, and adding them together. We perform this extraction with regex:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nuncorrupt <- function(str) {\n  str |> \n    str_extract_all(\"mul\\\\(\\\\d+,\\\\d+\\\\)\") |> \n    unlist() |> \n    unglue_data(\"mul({d1},{d2})\", convert = TRUE) |> \n    pmap_dbl(prod) |> \n    sum()\n}\n```\n:::\n\n\n\n\nRun the `uncorrupt` function on the puzzle input:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nuncorrupt(input)\n```\n:::\n\n\n\n\n## Part 2\n\nRemove all text between `don't()` and `do()`, then uncorrupt the result. We use the regex expression `.*?` to remove as little text as possible between the `don't` and `do` statements (ungreedy), so that only the most recent command is used:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninput |> \n  str_remove_all(\"don't\\\\(\\\\).*?do\\\\(\\\\)\") |>   \n  uncorrupt()\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}