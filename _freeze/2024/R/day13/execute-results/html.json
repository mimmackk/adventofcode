{
  "hash": "0286f50b7f19a45b4680ca786bc47448",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Day 13\"\ndate: 2024-12-13\nauthor:\n  name: https://adventofcode.com/2024/day/13\n  url: https://adventofcode.com/2024/day/13\n---\n\n\n\n\n## Setup\n\nImport libraries:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(unglue)\n```\n:::\n\n\n\n\nDisable scientific formatting when displaying large numbers:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\noptions(scipen = 999)\n```\n:::\n\n\n\n\nRead input from file:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninput <- read_lines(\"../input/day13.txt\", skip_empty_rows = TRUE)\n```\n:::\n\n\n\n\nExtract numerical values from text input into a data frame:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf <- input |> \n  unglue_data(c(\n    \"Button {button}: X+{x=\\\\d+}, Y+{y=\\\\d+}\",\n    \"{button}: X={x=\\\\d+}, Y={y=\\\\d+}\"\n  )) |> \n  mutate(\n    machine_id = floor((row_number() - 1) / 3),\n    across(c(x, y), parse_number),\n    .before = everything()\n  ) |> \n  pivot_wider(names_from = button, values_from = c(x, y))\n```\n:::\n\n\n\n\n## Part 1\n\nDefine a function to convert numeric equation input and output token counts:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncompute_tokens <- function(df) {\n  \n  # Convert each machine's properties into a system of equations and solve.\n  soln <- df |> \n    nest(coeff = c(x_A, x_B, y_A, y_B)) |> \n    nest(intercept = c(x_Prize, y_Prize)) |> \n    mutate(\n      coeff = map(coeff, ~ matrix(as.numeric(.x), nrow = 2, byrow = TRUE)),\n      intercept = map(intercept, as.numeric),\n      soln = map2(\n        coeff, \n        intercept, \n        ~ solve(.x, .y) |> \n          set_names(\"A\", \"B\") |> \n          as_tibble_row()\n      )\n    ) |> \n    unnest(soln) |> \n    select(machine_id, A, B)\n  \n  \n  # Check that the solution is two whole numbers, then sum the token cost\n  soln |> \n    mutate(\n      across(\n        c(A, B), \n        ~ near(.x, abs(round(.x)), tol = 0.001), \n        .names = \"{.col}_valid\"\n      ),\n      win = A_valid & B_valid,\n      tokens = if_else(win, 3 * A + B, 0)\n    ) |> \n    pull(tokens) |> \n    sum()\n}\n```\n:::\n\n\n\n\nRun function on puzzle input: \n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncompute_tokens(df)\n```\n:::\n\n\n\n\n\n## Part 2\n\nAdd 10000000000000 to each prize intercept and re-compute:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf |> \n  mutate(across(c(x_Prize, y_Prize), ~ .x + 10000000000000)) |> \n  compute_tokens()\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}