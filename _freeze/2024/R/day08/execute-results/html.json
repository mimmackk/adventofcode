{
  "hash": "4c5aae34e4b4f40cef37b9baa884c7b9",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Day 8\"\ndate: 2024-12-08\nauthor:\n  name: https://adventofcode.com/2024/day/8\n  url: https://adventofcode.com/2024/day/8\n---\n\n\n\n\n## Setup\n\nImport libraries:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n:::\n\n\n\n\nRead input from file:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninput <- read_lines(\"../input/day08.txt\")\n```\n:::\n\n\n\n\nConvert text input to a character matrix:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmtx <- input |>\n  str_split(\"\") |> \n  unlist() |> \n  matrix(nrow = length(input), byrow = TRUE)\n```\n:::\n\n\n\n\n## Part 1\n\nDefine a helper function to check if a coordinate `x` is within the bounds of the map (mtx):\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nin_bounds <- \\(x, map) between(x[1], 1, nrow(map)) & between(x[2], 1, ncol(map))\n```\n:::\n\n\n\n\nDefine a helper function to compute the antinodes of a given pair of antenna coordinates on a map:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nantinode_pair <- function(x1, x2, map) {\n  diff <- x2 - x1\n  keep(list(x1 - diff, x2 + diff), ~ in_bounds(.x, map))\n}\n```\n:::\n\n\n\n\nDefine a helper function to get the coordinates of every antenna of a given frequency on a map:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nget_antennas <- function(freq, map) {\n  antennas <- which(map == freq, arr.ind = TRUE)\n  split(antennas, row(antennas))\n}\n```\n:::\n\n\n\n\nDefine a function to compute all antinodes of a given frequency in a map:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nget_all_antinodes <- function(freq, map, f) {\n  antennas <- get_antennas(freq, map)\n  \n  pairs <- combn(antennas, 2)\n  pairs <- split(pairs, col(pairs))\n  \n  pairs |> \n    map(~ f(.x[[1]], .x[[2]], map)) |> \n    list_flatten() |> \n    unique()\n}\n```\n:::\n\n\n\n\nCompute the distinct set of frequencies in the map:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfreqs <- mtx |>\n  as.vector() |>\n  unique() |> \n  keep(~ .x %in% c(letters, LETTERS, as.character(0:9)))\n```\n:::\n\n\n\n\nCount all distinct antinode locations across all frequencies in the map:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfreqs |> \n  map(~ get_all_antinodes(.x, mtx, antinode_pair)) |> \n  list_flatten() |> \n  unique() |> \n  length()\n```\n:::\n\n\n\n\n## Part 2\n\nUpdate the antinode function which computes the antidotes of a given pair of antennas:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nantinode_set <- function(x1, x2, map) {\n  diff <- x2 - x1\n  antinodes <- list(x1, x2)\n  \n  i <- 1\n  while(in_bounds(x2 + i * diff, map)) {\n    antinodes <- c(antinodes, list(as.integer(x2 + i * diff)))\n    i <- i + 1\n  }\n\n  i <- 1\n  while(in_bounds(x1 - i * diff, map)) {\n    antinodes <- c(antinodes, list(as.integer(x1 - i * diff)))\n    i <- i + 1\n  }\n  \n  antinodes\n}\n```\n:::\n\n\n\n\nRe-run puzzle input:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfreqs |> \n  map(~ get_all_antinodes(.x, mtx, antinode_set)) |> \n  list_flatten() |> \n  unique() |> \n  length()\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}