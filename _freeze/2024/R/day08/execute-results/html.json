{
  "hash": "e5a42ebc4f4f1d5292d6c2532210a3eb",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Day 8\"\ndate: 2024-12-08\nauthor:\n  name: https://adventofcode.com/2024/day/8\n  url: https://adventofcode.com/2024/day/8\n---\n\n\n\n\n\n## Setup\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Libraries\nlibrary(tidyverse)\n\n# Read input from file\ninput <- read_lines(\"../input/day08.txt\", skip_empty_rows = TRUE)\n```\n:::\n\n\n\n\n\n## Part 1\n\nDefine antinode functions:\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Check if a coordinate is in the bounds of the map\nin_bounds <- function(x, map) {\n  between(x[1], 1, nrow(map)) & between(x[2], 1, ncol(map))\n}\n\n# Compute the antinodes of a given pair of antennas\nantinode_pair <- function(x1, x2, map) {\n  diff <- x2 - x1\n  list(x1 - diff, x2 + diff) |> \n    keep(~in_bounds(.x, map))\n}\n\n# Get coordinates of every antenna of the given frequency\nget_freq_antennas <- function(freq, map) {\n  antennas <- which(map == freq, arr.ind = TRUE)\n  split(antennas, row(antennas))\n}\n\n# Compute all antinodes of a given frequency in a given map\nget_all_antinodes <- function(freq, map, f) {\n  antennas <- get_freq_antennas(freq, map)\n  \n  pairs <- combn(antennas, 2)\n  pairs <- split(pairs, col(pairs))\n  \n  pairs |> \n    map(~f(.x[[1]], .x[[2]], map)) |> \n    list_flatten() |> \n    unique()\n}\n```\n:::\n\n\n\n\n\nRun antinode functions on puzzle input:\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Convert input to matrix format\nmtx <- input |>\n  str_split(\"\") |> \n  unlist() |> \n  matrix(nrow = length(input), byrow = TRUE)\n\n# Find the distinct set of frequencies in the map\nfreqs <- keep(\n  unique(as.vector(mtx)), \n  ~.x %in% c(letters, LETTERS, as.character(0:9))\n)\n\n# Count all distinct antinode locations across all frequencies in the map\nfreqs |> \n  map(~get_all_antinodes(.x, mtx, antinode_pair)) |> \n  list_flatten() |> \n  unique() |> \n  length()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 369\n```\n\n\n:::\n:::\n\n\n\n\n\n## Part 2\n\nUpdate the antinode function:\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Compute the updated antinodes of a given pair of antennas\nantinode_set <- function(x1, x2, map) {\n  diff <- x2 - x1\n  antinodes <- list(x1, x2)\n  \n  i <- 1\n  while(in_bounds(x2 + i * diff, map)) {\n    antinodes <- c(antinodes, list(as.integer(x2 + i * diff)))\n    i <- i + 1\n  }\n\n  i <- 1\n  while(in_bounds(x1 - i * diff, map)) {\n    antinodes <- c(antinodes, list(as.integer(x1 - i * diff)))\n    i <- i + 1\n  }\n  \n  antinodes\n}\n```\n:::\n\n\n\n\n\nRe-run puzzle input:\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfreqs |> \n  map(~get_all_antinodes(.x, mtx, antinode_set)) |> \n  list_flatten() |> \n  unique() |> \n  length()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1169\n```\n\n\n:::\n:::\n",
    "supporting": [
      "day08_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}