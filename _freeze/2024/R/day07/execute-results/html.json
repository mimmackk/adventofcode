{
  "hash": "a1f7a7e6e7173e0cac121920736add18",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Day 7\"\ndate: 2024-12-07\nauthor:\n  name: https://adventofcode.com/2024/day/7\n  url: https://adventofcode.com/2024/day/7\n---\n\n\n\n## Setup\n\nImport libraries:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(unglue)\n```\n:::\n\n\n\nDisable scientific formatting when displaying large numbers:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\noptions(scipen = 999)\n```\n:::\n\n\n\nRead plaintext input from file into a dataframe of target / numeric sequence pairs:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninput <- read_lines(\"../input/day07.txt\") |> \n  unglue_data(\"{target}: {seq}\", convert = TRUE) |> \n  mutate(seq = map(seq, ~ as.numeric(str_split_1(.x, \" \"))))\n```\n:::\n\n\n\n## Part 1\n\nDefine a recursive function that explores every combination of operators for a given seq and returns when any path to the target output is found:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncalibrate <- function(seq, target, operators) {\n  \n  # If the end of the list has been reached, check if we hit the target & exit\n  if (length(seq) == 1) \n    return(seq == target)\n  \n  # If the target is already overshot, exit\n  if (seq[1] > target)\n    return(FALSE)\n  \n  # Collapse the first two items in the seq for each operator & recurse\n  map_lgl(operators, \\(f) {\n    new_start <- get(f)(seq[1], seq[2])\n    new_seq <- c(new_start, tail(seq, -2))\n    calibrate_operators(new_seq, target, operators)\n  }) |> \n    # If any output is true, the output has been calibrated.\n    any()\n}\n```\n:::\n\n\n\nLoop through every seq-target pair to determine which are valid, then sum their outputs:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninput |> \n  filter(map2_lgl(seq, target, ~ calibrate(.x, .y, c(\"+\", \"*\")))) |> \n  pull(target) |> \n  sum()\n```\n:::\n\n\n\n## Part 2\n\nDefine a new concatenation operator:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nconcat <- \\(x, y) as.numeric(str_c(x, y))\n```\n:::\n\n\n\nRe-run the calibration on the puzzle input with the new concat operator:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninput |> \n  filter(map2_lgl(seq, target, ~ calibrate(.x, .y, c(\"+\", \"*\", \"concat\")))) |> \n  pull(target) |> \n  sum()\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}