{
  "hash": "43cae7709d57d944a5ba1aa078ce7372",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Day 11\"\ndate: 2024-12-11\nauthor:\n  name: https://adventofcode.com/2024/day/11\n  url: https://adventofcode.com/2024/day/11\n---\n\n\n\n\n## Setup\n\nImport libraries:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n:::\n\n\n\n\nDisable scientific formatting when displaying large numbers:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\noptions(scipen = 999)\n```\n:::\n\n\n\n\nRead input from file into a numeric vector:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninput <- scan(\"../input/day11.txt\")\n```\n:::\n\n\n\n\n## Part 1\n\nDefine a function for a single blink. If x is zero, it becomes 1. If x has an even number of digits, the value is split. If odd, it's multiplied by 2024.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nblink <- function(x) {\n  char <- format(x, scientific = FALSE)\n  n <- str_length(char)\n  \n  if (x == 0) \n    1\n  else if (n %% 2 == 0)\n    parse_number(c(str_sub(char, 1, n / 2), str_sub(char, n / 2 + 1, n)))\n  else \n    x * 2024\n}\n```\n:::\n\n\n\n\nDefine a recursive function to blink `n` times. We don't store each stone separately -- instead, we store the current unique stones and their counts at every step:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nblink_n <- function(df, n) {\n  if (n == 0)\n    return(sum(df$n))\n  \n  df |> \n    mutate(stones = map(stones, blink)) |> \n    unnest(stones) |> \n    summarize(n = sum(n), .by = stones) |> \n    blink_n(n - 1)\n}\n```\n:::\n\n\n\n\nRun the blink function 25 times on the puzzle input, starting each stone with a count of 1:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nblink_n(tibble(stones = input, n = 1), 25)\n```\n:::\n\n\n\n\n## Part 2\n\nRun blink function 75 times on puzzle input:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nblink_n(tibble(stones = input, n = 1), 75)\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}