{
  "hash": "e5a84c4defdc067cc872b455065d55a9",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Day 5\"\ndate: 2023-12-05\nauthor:\n  name: https://adventofcode.com/2023/day/5\n  url: https://adventofcode.com/2023/day/5\n---\n\n\n\n## Setup\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Libraries\nlibrary(tidyverse)\nlibrary(unglue)\nlibrary(sets)\n\n# Read input from file\ninput <- read_lines(\"../input/day05.txt\", skip_empty_rows = FALSE)\n```\n:::\n\n\n\n## Part 1\n\nParse input into sets of separate vector inputs and maps:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nseeds <- head(input, 1) |> \n  str_remove(\"seeds: \") |> \n  str_split_1(\" \") |> \n  as.numeric()\n\nmaps <- tail(input, -2) |> \n  enframe(name = NULL, value = \"txt\") |> \n  mutate(\n    map_id = cumsum(txt == \"\"),\n    map_name = case_when(str_detect(txt, \":\") ~ txt)\n  ) |> \n  fill(map_name, .direction = \"down\") |> \n  unglue_unnest(map_name, \"{src_cat}-to-{dst_cat} map:\") |> \n  filter(txt != \"\" & !str_detect(txt, \":\")) |> \n  unglue_unnest(txt, \"{dst_start} {src_start} {range_len}\", convert = TRUE) |> \n  mutate(\n    src_end = src_start + range_len - 1,\n    dst_end = dst_start + range_len - 1,\n    diff = dst_start - src_start\n  ) |> \n  select(map_id, src_cat, dst_cat, src_start, src_end, dst_start, dst_end, diff) |> \n  group_split(map_id, .keep = FALSE)\n```\n:::\n\n\n\nConvert seed maps to interval notation:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Add rows for the interval complement (neg infinity to infinity) to each map\nmaps_interval <- maps |> \n  map(\\(df) {\n    complement <- df |> \n      pmap(\\(src_start, src_end, ...) {\n        interval(src_start, src_end, domain = 'Z')\n      }) |> \n      interval_union() |> \n      interval_complement() |> \n      as.list() |> \n      map_dfr(~ tibble(src_start = min(.x), src_end = max(.x))) |> \n      mutate(\n        dst_start = src_start,\n        dst_end = src_end,\n        diff = 0\n      )\n    \n    df |> \n      select(-ends_with(\"_cat\")) |> \n      bind_rows(complement)\n  }) \n\n\n# Join each map to one another in sequence to create one overall src/dest map\nmain_map <- maps_interval |> \n  reduce(\n    ~ cross_join(.x, .y) |> \n      mutate(\n        overlap_start = pmax(dst_start.x, src_start.y),\n        overlap_end   = pmin(dst_end.x,   src_end.y),\n        is_overlap    = overlap_start <= overlap_end\n      ) |> \n      filter(is_overlap) |> \n      transmute(\n        src_start = overlap_start - diff.x,\n        src_end   = overlap_end   - diff.x,\n        dst_start = overlap_start + diff.y,\n        dst_end   = overlap_end   + diff.y,\n        diff      = diff.x + diff.y\n      )\n  )\n```\n:::\n\n\n\nFind final location of all seeds, then take the minimum:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmain_map |> \n  cross_join(tibble(seed = seeds)) |> \n  filter(seed >= src_start & seed <= src_end) |> \n  mutate(loc = seed + diff) |> \n  pull(loc) |> \n  min()\n```\n:::\n\n\n\n\n\n## Part 2\n\nConvert seed inputs to intervals:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nseeds_interval <- tibble(seed = seeds) |> \n  mutate(\n    type = case_match(\n      row_number() %% 2, \n      1 ~ \"seed_start\", \n      0 ~ \"range_len\"\n    ),\n    pair_id = ceiling(row_number() / 2)\n  ) |> \n  pivot_wider(names_from = type, values_from = seed) |> \n  transmute(seed_start, seed_end = seed_start + range_len - 1)\n```\n:::\n\n\n\nJoin the seed intervals onto the mapper, filter to the overlap, and take the min result:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmain_map |> \n  cross_join(seeds_interval) |> \n  mutate(\n    overlap_start = pmax(seed_start, src_start),\n    overlap_end   = pmin(seed_end,   src_end),\n    is_overlap    = overlap_start <= overlap_end\n  ) |> \n  filter(is_overlap) |> \n  mutate(loc_start = overlap_start + diff) |> \n  pull(loc_start) |> \n  min()\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}