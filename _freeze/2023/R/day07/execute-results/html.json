{
  "hash": "30bff0365312a49eb94d0fb5a6eae847",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Day 7\"\ndate: 2023-12-07\nauthor:\n  name: https://adventofcode.com/2023/day/7\n  url: https://adventofcode.com/2023/day/7\n---\n\n\n\n\n## Setup\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Libraries\nlibrary(tidyverse)\nlibrary(unglue)\n\n# Read input from file\ninput <- read_lines(\"../input/day07.txt\", skip_empty_rows = FALSE)\n```\n:::\n\n\n\n\n## Part 1\n\nParse text input as a bid and set of cards for each hand:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncard_types <- c(2:9, 'T', 'J', 'Q', 'K', 'A')\n\nhands <- input |> \n  unglue_data(\"{card1=.}{card2=.}{card3=.}{card4=.}{card5=.} {bid}\") |> \n  transmute(\n    hand_id = row_number(),\n    bid = as.numeric(bid),\n    across(starts_with(\"card\"), partial(factor, levels = card_types)),\n    cards = pmap(list(card1, card2, card3, card4, card5), c)\n  )\n```\n:::\n\n\n\n\nDefine a function to compute the type of each hand:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhand_types <- c(\"HIGH\", \"PAIR\", \"2PAIR\", \"3KIND\", \"FULL\", \"4KIND\", \"5KIND\")\n\nhand_type <- function(cards) {\n  card_counts <- sort(summary(cards), decreasing = TRUE)\n  case_when(\n    card_counts[1] == 3 & card_counts[2] == 2 ~ \"FULL\",\n    card_counts[1] == 2 & card_counts[2] == 2 ~ \"2PAIR\",\n    card_counts[1] == 5 ~ \"5KIND\",\n    card_counts[1] == 4 ~ \"4KIND\",\n    card_counts[1] == 3 ~ \"3KIND\",\n    card_counts[1] == 2 ~ \"PAIR\",\n    card_counts[1] == 1 ~ \"HIGH\"\n  )\n}\n```\n:::\n\n\n\n\nDefine a function to determine the type of each hand, rank the results, and sum the total winnings:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nscore <- function(df) {\n  df |> \n    mutate(hand_type = factor(map_chr(cards, hand_type), levels = hand_types)) |> \n    arrange(hand_type, card1, card2, card3, card4, card5) |> \n    mutate(\n      rank = row_number(),\n      winnings = rank * bid\n    ) |> \n    pull(winnings) |> \n    sum()\n}\n```\n:::\n\n\n\n\nRun on puzzle input:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nscore(hands)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 252295678\n```\n\n\n:::\n:::\n\n\n\n\n\n## Part 2\n\nRedefine the hand-scoring function to allow jokers to act as any card:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhand_type <- function(cards) {\n  \n  counts_joker <- sum(cards == \"J\")\n  counts_other <- cards |> \n    discard(~ .x == \"J\") |> \n    summary() |> \n    sort(decreasing = TRUE)\n  \n  top_1 <- counts_other[1] + counts_joker\n  top_2 <- counts_other[2]\n  \n  case_when(\n    top_1 == 3 & top_2 == 2 ~ \"FULL\",\n    top_1 == 2 & top_2 == 2 ~ \"2PAIR\",\n    top_1 == 5 ~ \"5KIND\",\n    top_1 == 4 ~ \"4KIND\",\n    top_1 == 3 ~ \"3KIND\",\n    top_1 == 2 ~ \"PAIR\",\n    top_1 == 1 ~ \"HIGH\"\n  )\n}\n```\n:::\n\n\n\n\n\nRe-rank the jokers to the bottom of the card heirarcy and re-score:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncard_types <- c(\"J\", discard(card_types, ~ .x == \"J\"))\n\nhands |> \n  mutate(across(num_range(\"card\", 1:5), partial(factor, levels = card_types))) |> \n  score()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 250577259\n```\n\n\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}