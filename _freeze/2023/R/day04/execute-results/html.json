{
  "hash": "59889e1c06795052f09aae5b0b613f43",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Day 4\"\ndate: 2023-12-04\nauthor:\n  name: https://adventofcode.com/2023/day/4\n  url: https://adventofcode.com/2023/day/4\n---\n\n\n\n## Setup\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Libraries\nlibrary(tidyverse)\n\n# Read input from file\ninput <- read_lines(\"../input/day04.txt\", skip_empty_rows = FALSE)\n```\n:::\n\n\n\n## Part 1\n\nReformat input into lists of winning numbers vs chosen numbers for each card, then score each card:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncards <- input |> \n  \n  # Reformat as a data frame of winning vs chosen numbers per card\n  str_remove(\"Card .*:\") |> \n  enframe(name = \"card_id\", value = \"txt\") |> \n  separate(txt, into = c(\"winning\", \"chosen\"), sep = \"\\\\|\") |> \n  mutate(across(c(winning, chosen), \\(vec) {\n    vec |> \n      trimws() |> \n      str_split(\"\\\\s+\") |> \n      map(parse_number)\n  })) |> \n  \n  # Count the number of overlapping chosen & winning numbers per card:\n  mutate(\n    n_common = map2_int(winning, chosen, ~ length(intersect(.x, .y))),\n    score = if_else(n_common == 0, 0, 2^(n_common - 1))\n  )\n```\n:::\n\n\n\nSum all cards' scores:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsum(cards$score)\n```\n:::\n\n\n\n## Part 2\n\nCreate a reference table of the outputs received for each winning card: \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrewards <- cards |> \n  mutate(\n    reward_start = card_id + 1,\n    reward_end = pmin(card_id + n_common, max(card_id)),\n    reward = pmap(list(reward_start, reward_end, n_common), \\(start, end, n) {\n      if (n == 0) \n        rep(0, nrow(cards))\n      else \n        rep(0, nrow(cards)) |> \n        modify_at(.at = seq(start, end), ~1)\n    })\n  ) |> \n  pull(reward)\n```\n:::\n\n\n\nLoop through each card in the inventory, accumulate rewards at each step, then sum the final total number of cards:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncollect_reward <- \\(inventory, i) inventory + inventory[[i]] * rewards[[i]]\n\nreduce(1:nrow(cards), collect_reward, .init = rep(1, nrow(cards))) |> \n  sum()\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}