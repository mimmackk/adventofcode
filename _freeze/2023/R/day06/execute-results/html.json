{
  "hash": "0d1f5f9830b4dc75cf1037c85b9ac5f1",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Day 6\"\ndate: 2023-12-06\nauthor:\n  name: https://adventofcode.com/2023/day/6\n  url: https://adventofcode.com/2023/day/6\n---\n\n\n\n\n## Setup\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Libraries\nlibrary(tidyverse)\nlibrary(unglue)\n\n# Read input from file\ninput <- read_lines(\"../input/day06.txt\", skip_empty_rows = FALSE)\n```\n:::\n\n\n\n\n## Part 1\n\nConvert input text into a set of time/distance vectors for each race:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nraces <- c(\"time\" = 1, \"distance\" = 2) |> \n  imap(\\(i, name) {\n    input[[i]] |>\n      str_remove(regex(str_c(name, \":\\\\s+\"), ignore_case = T)) |>\n      str_split_1(\"\\\\s+\") |>\n      as.numeric()\n  }) |> \n  pmap(\\(time, distance) list(time = time, record = distance))\n```\n:::\n\n\n\n\nDefine a function to compute your traveled distance in each race, given the amount of time you hold the button:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrace_dist <- function(time_race, time_hold) {\n  (time_race - time_hold) * time_hold\n}\n```\n:::\n\n\n\n\nFor each race, count the number of record-beating ways to win:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nraces |> \n  map_int(\\(race) sum(race_dist(race$time, 0:race$time) > race$record)) |> \n  prod()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 32076\n```\n\n\n:::\n:::\n\n\n\n\n## Part 2\n\nCombine the individual race numbers into one single race:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrace <- races |> \n  enframe(name = \"pos\") |> \n  unnest_wider(value) |> \n  summarize(across(c(time, record), ~ as.numeric(str_c(.x, collapse = \"\")))) |> \n  pivot_longer(everything()) |> \n  deframe() |> \n  as.list()\n```\n:::\n\n\n\n\nCompute roots of the race distance function using the quadratic equation to determine the range of record-winning hold times:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwinning_methods <- function(time_race, record) {\n  root1 <- (time_race + sqrt(time_race^2 - 4 * record)) / 2\n  root2 <- (time_race - sqrt(time_race^2 - 4 * record)) / 2\n  \n  bnd_l <- ceiling(max(min(root1, root2), 0))\n  bnd_r <- floor(min(max(root1, root2), time_race))\n  \n  bnd_l <- if_else(race_dist(time_race, bnd_l) == record, bnd_l + 1, bnd_l)\n  bnd_r <- if_else(race_dist(time_race, bnd_r) == record, bnd_r - 1, bnd_r)\n  \n  bnd_r - bnd_l + 1\n}\n```\n:::\n\n\n\n\nRun on puzzle input:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwinning_methods(race$time, race$record)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 34278221\n```\n\n\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}