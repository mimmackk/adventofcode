{
  "hash": "ad5a8cc0ed8c39e913aedccfd7530373",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Day 8\"\ndate: 2022-12-08\nauthor:\n  name: https://adventofcode.com/2022/day/8\n  url: https://adventofcode.com/2022/day/8\n---\n\n\n\n\n## Setup\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Libraries\nlibrary(tidyverse)\n\n# Read input from file and format as a matrix\ninput <- read_fwf(\"../input/day08.txt\") |> \n  transmute(x = str_split(X1, \"\")) |>\n  unnest_wider(x, names_sep = \"\") |>\n  mutate(across(everything(), as.integer)) |>\n  as.matrix()\n```\n:::\n\n\n\n\n## Parts 1 & 2\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create df with one row per tree and variables for its containing row & col\nexpand_grid(\n  col_pos = 1:nrow(input),\n  row_pos = 1:ncol(input)\n) |>\n  mutate(\n    tree_idx = row_number(),\n    row_list = map(col_pos, ~ unname(as.matrix(input)[.x, ])),\n    col_list = map(row_pos, ~ unname(as.matrix(input)[, .x])),\n  ) |>\n\n  # For each tree, construct its treeline looking outward in each direction\n  pivot_longer(\n    c(col_pos, row_pos, col_list, row_list),\n    names_to = c(\"axis\", \".value\"),\n    names_sep = \"_\"\n  ) |>\n  mutate(\n    split = map2(\n      list,\n      pos,\n      ~ split(.x, c(rep(\"bwd\", .y - 1), \"curr_tree\", rep(\"fwd\", length(.x) - .y)))\n    )\n  ) |>\n  unnest_wider(split) |>\n  mutate(bwd = map(bwd, rev)) |>\n  pivot_longer(c(fwd, bwd), names_to = \"dir\", values_to = \"treeline\") |>\n\n  # Check if each is the tallest tree in each direction & count visible trees\n  mutate(\n    is_tallest = map2_lgl(curr_tree, treeline, ~ all(.x > .y)),\n    num_visible = map2_int(curr_tree, treeline, function(curr_tree, treeline) {\n      ifelse(\n        every(treeline, ~.x < curr_tree),\n        length(treeline),\n        detect_index(treeline, ~ .x >= curr_tree)\n      )\n    })\n  ) |>\n\n  # Summarize visibility & scenic scores from all 4 directions for each tree\n  group_by(tree_idx) |>\n  summarize(\n    is_visible = any(is_tallest),\n    scenic_score = prod(num_visible)\n  ) |>\n  ungroup() |>\n\n  # Compute total trees visible from forest edge & max scenic score in forest\n  summarize(\n    total_visible = sum(is_visible),\n    max_scenic_score = max(scenic_score)\n  )\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 Ã— 2\n  total_visible max_scenic_score\n          <int>            <dbl>\n1          1690           535680\n```\n\n\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}