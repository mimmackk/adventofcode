{
  "hash": "4eb75bcb4d84ceead983ae89903fe363",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Day 7\"\ndate: 2022-12-07\nauthor:\n  name: https://adventofcode.com/2022/day/7\n  url: https://adventofcode.com/2022/day/7\n---\n\n\n\n## Setup\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Libraries\nlibrary(tidyverse)\n\n# Read input from file\ninput <- read_lines(\"../input/day07.txt\") |> \n  enframe(name = NULL)\n```\n:::\n\n\n\n## Part 1\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndir_sizes <- input |> \n  mutate(\n\n    # Determine path of each file by accumulating preceding cd terms\n    path = value |>\n      str_extract(\"(?<=^\\\\$ cd ).*\") |>\n      str_c(\"/\") |>\n      replace_na(\"\") |>\n      accumulate(\n        ~ if (.y == \"../\") {\n          str_remove(.x, \"(?<=/)[a-z]+/$\")\n        } else {\n          str_c(.x, .y)\n        }\n      ) |>\n      str_remove_all(\"^/|/$\"),\n\n    # Convert paths to lists of all containing directories\n    dirs = path |>\n      str_split(\"/\") |>\n      map(~accumulate(.x, str_c, sep = \"/\"))\n  ) |>\n\n  # Remove commands & directories from output and format file info as cols\n  filter(!str_detect(value, \"^\\\\$|dir \")) |>\n  separate(value, into = c(\"size\", \"file\"), sep = \" \") |>\n  mutate(size = as.integer(size)) |>\n\n  # Convert nested lists of directories to long-format\n  unnest_wider(dirs, names_sep = \"_\") |>\n  mutate(dirs_1 = \"/\") |>\n  pivot_longer(\n    cols = matches(\"dirs_\\\\d+\"),\n    names_to = NULL,\n    values_to = \"dir\",\n    values_drop_na = TRUE\n  ) |>\n\n  # Compute size of each directory\n  group_by(dir) |>\n  summarize(size = sum(size)) |>\n  ungroup()\n```\n:::\n\n\n\nSum sizes of all directories with maximum size 100000:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndir_sizes |>\n  filter(size <= 100000) |>\n  pull(size) |>\n  sum()\n```\n:::\n\n\n\n## Part 2\n\nFind size of the smallest necessary directory to delete:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncurr_system_size <- dir_sizes |>\n  filter(dir == \"/\") |>\n  pull(size)\n\ndir_sizes |>\n  filter(size >= (30000000 - (70000000 - curr_system_size))) |>\n  slice_min(size) |>\n  pull(size)\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}