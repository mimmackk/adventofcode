---
title: "Day 20"
date: 2024-12-20
author:
  name: https://adventofcode.com/2024/day/20
  url: https://adventofcode.com/2024/day/20
---

## Setup

```{r setup}
# Libraries
library(tidyverse)
library(igraph)

# Read input from file
input <- read_table("../input/day20.txt", col_names = "char") |> 
  mutate(
    row = row_number(),
    char = str_split(char, "")
  ) |> 
  unnest_longer(char, indices_to = "col")

```

## Part 1

Build the base-state graph:

```{r}

# Remove borders and define graph edges
df <- input |> 
  filter(row > 1 & row < max(row) & col > 1 & col < max(col)) |> 
  mutate(
    id = row_number(),
    row = row - 1, 
    col = col - 1
  ) |> 
  mutate(is_wall = char == "#") |> 
  mutate(id_n = lag(id), is_wall_n = lag(is_wall), .by = col) |> 
  mutate(id_w = lag(id), is_wall_w = lag(is_wall), .by = row) |> 
  mutate(
    edge_n = case_when(!is_wall & !is_wall_n ~ map2(id, id_n, ~ c(.x, .y))),
    edge_w = case_when(!is_wall & !is_wall_w ~ map2(id, id_w, ~ c(.x, .y)))
  )

# Define graph
g <- df |> 
  select(edge_n, edge_w) |> 
  pivot_longer(everything()) |> 
  pull(value) |> 
  unlist() |> 
  make_graph(n = max(df$id), directed = FALSE)

# Define start and end positions
id_start <- df |> filter(char == "S") |> pull(id)
id_end   <- df |> filter(char == "E") |> pull(id)

# Get the base number of steps to compare against
base_steps <- distances(g, id_start, id_end) |> as.list() |> unlist()

```

Loop through alternate states, removing one wall at a time, and count how many steps each saves:

```{r}

wall_ids <- df |> 
  filter(char == "#") |> 
  pull(id)

shortcuts <- NULL

for (x in wall_ids) {

  new_edges_source <- df |> 
    filter(id == x) |> 
    mutate(
      edge_n = case_when(!is_wall_n ~ map2(id, id_n, ~ c(.x, .y))),
      edge_w = case_when(!is_wall_w ~ map2(id, id_w, ~ c(.x, .y)))
    ) |> 
    select(edge_n, edge_w) |> 
    pivot_longer(everything()) |> 
    pull(value) |> 
    unlist()
  
  new_edges_target <- df |> 
    filter(!is_wall & (id_n == x | id_w == x)) |> 
    pull(id) |> 
    map(~c(.x, x)) |> 
    unlist()
  
  num_steps <- g |> 
    add_edges(c(new_edges_source, new_edges_target)) |> 
    distances(id_start, id_end) |> 
    as.list() |> 
    unlist()
  
  shortcuts <- c(shortcuts, num_steps)
}

```

Count the number of shortcuts by steps saved:

```{r}

count_shortcuts <- tibble(steps_saved = base_steps - shortcuts) |> 
  filter(steps_saved > 0) |> 
  summarize(n = n(), .by = steps_saved) |> 
  arrange(desc(n), steps_saved)

```

Count the number of shortcuts that save at least 100 seconds:

```{r}

count_shortcuts |> 
  filter(steps_saved >= 100) |> 
  pull(n) |> 
  sum()

```

